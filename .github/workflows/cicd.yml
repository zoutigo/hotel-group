name: Full CI process for Symfony 5 / React

on: [push]



jobs:

  backend :
    name: Running functional and unit test
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: true
      matrix:
        php-versions: ['8']

    env: 
      DB_DATABASE: test_db
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: 127.0.0.1 
      APP_ENV: test

   

    steps: 
 
      # —— Setup Github actions 🐙 —————————————————————————————————————————————
      ## https://github.com/actions/checkout (official)
        - name: Checkout
          uses: actions/checkout@v2

       ## https://github.com/shivammathur/setup-php (community)
        - name: Setup PHP, extensions and composer with shivammathur/setup-php
          uses: shivammathur/setup-php@v2
          with:
            php-version: ${{ matrix.php-versions }}
            extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, mysqli
          env:
            update: true

        - name: Check PHP Version
          run: php -v

      ## —— Php Coding standards ✨ ————————————————————————————————————————————————
        - name: Coding standards checks (php_codesniffer + php-cs-fixer)
          run: make cs
          if: matrix.php-versions == '8.0'

      ## —— Composer 🧙‍️ —————————————————————————————————————————————————————————
        - name: Update composer
          run: composer update

        - name: Validate composer.json and composer.lock
          run: composer validate --no-check-all --no-check-publish

        - name: Get composer cache directory
          id: composer-cache
          run: echo "::set-output name=dir::$(composer config cache-files-dir)"

        - name: Cache composer dependencies
          uses: actions/cache@v1
          with:
            path: ${{ steps.composer-cache.outputs.dir }}
            key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
            restore-keys: ${{ runner.os }}-composer-

        - name: Install Composer dependencies
          run: composer install --no-progress --prefer-dist --optimize-autoloader

       
      
        ## —— Symfony 🎵 ——————————————————————————————————————————————————————————
    
        - name: Check Symfony requirements
          run: vendor/bin/requirements-checker

           ## —— Setup MySql ——————————————————————————————————————————————————————————
    
        - name: Set up MySQL
          run: |
            sudo /etc/init.d/mysql start
            mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE IF NOT EXISTS db1;'
            mysql -e 'CREATE DATABASE IF NOT EXISTS ${{env.DB_DATABASE }};' -u${{env.DB_USER }} -p${{ env.DB_PASSWORD }}
            mysql -e 'CREATE DATABASE IF NOT EXISTS ${{env.DB_DATABASE }}_${{env.APP_ENV}};' -u${{env.DB_USER }} -p${{ env.DB_PASSWORD }}
            mysql -e 'status ;' -u${{env.DB_USER }} -p${{ env.DB_PASSWORD }}
            mysql -e 'SHOW VARIABLES ;' -u${{env.DB_USER}} -p${{env.DB_PASSWORD}}
            mysql -e 'SHOW DATABASES;' -u${{env.DB_USER}} -p${{env.DB_PASSWORD}}
      
        ## —— Unit Tests🎵 ——————————————————————————————————————————————————————————
    
        - name: php-unit
          run: vendor/bin/phpunit --testdox

  
      ## run tests

        - name: Run Migration && Load Fixtures
          env:
            APP_ENV: test
            MYSQL_ROOT_PASSWORD: ${{env.DB_PASSWORD}}
            MYSQL_DATABASE: ${{env.DB_DATABASE}}
            DB_PORT: 3306
            DATABASE_URL: mysql://${{env.DB_USER}}:${{env.DB_PASSWORD}}@127.0.0.1:3306/${{env.DB_DATABASE}}
          run: |
            php bin/console doctrine:schema:drop --force
            php bin/console doctrine:schema:update --env=test --force || echo "No migrations found or schema update failed"
            php bin/console doctrine:migrations:migrate --env=test || echo "No migrations found or migration failed"
            php bin/console doctrine:fixtures:load --no-interaction
         

        ## —— JWT 💫 —————————————————————————————————————————————————————————————
        - name: Generate the SSL keys
          run: bin/console lexik:jwt:generate-keypair

        ## —— NPM 🐱 ————————————————————————————————————————————————————————————
        - name: npm install
          uses: actions/setup-node@v2
          with:
            node-version: '16.3'
            #registry-url: npm.fontawesome.com
        - run: npm install
            #env:
          #NODE_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

        - name: npm run build
          run: npm run build

     

